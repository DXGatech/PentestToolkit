module WifiTool
module Network

class PacketQueue
    def initialize(iface, packet_throttle = 0.0, nworkers = 4)
        @iface = iface
        @nworkers = nworkers
        @throttle = packet_throttle
        @running = true
        @stream = PCAPRUB::Pcap.open_live(iface, 0xffff, false, 1) # interface, maximum bytes, promisc, timeout in ms
        @mutex = Mutex.new
        @queue = Queue.new
        @workers = (0...nworkers).map {::Thread.new{worker}}
        @ctx = Context.get

        begin
            @udp = UDPSocket.new
        rescue Errno::EMFILE
            Logger.warn "tremendous amount of udp sockets are being occupied by another process. retrying"
            sleep 1.0
            retry
        end
    end

    def push(packet)
        @queue.push(packet)
    end

    def wait_empty(timeout)
        Timeout::timeout(timeout){
            while !@queue.empty?
                sleep 0.5
            end
        }
        rescue
    end

    def stop
        wait_empty(6000)
        @running = false
        @nworkers.times{push(nil)} # nil signal for stopping worker
        @workers.map(&:join)
    end

    def dispatch_udp_packet(packet)
        ip, port, data = packet
        @mutex.synchronize{
            @udp.send(data, 0, ip, port)
        }
    end

    def dispatch_raw_packet(packet)
        @mutex.synchronize{
            @stream.inject(packet.headers[0].to_s)
        }
    end

    def worker
        Logger.debug "new packetqueue worker created"
        while @running
            begin
                packet = @queue.pop
                case packet
                when nil
                    Logger.debug "nil signal packet received, worker stopping"
                    break
                when Array # [ip, port, data] from Udp
                    dispatch_udp_packet(packet)
                when Object # raw
                    dispatch_raw_packet(packet)
                end
                sleep(@throttle) if @throttle != 0.0
            rescue Exception => e
                if !e.message.include?('Host is down') and !e.message.include?('Permission denied') and !e.message.include?('No route to host')
                    Logger.debug "abnormal packet queue misfunction \n"
                    Logger.debug "#{self.class.name}(#{packet.class.name}) : #{e.message}"
                end

                if e.message.include?('Too many open files') # BPF filtering overloaded
                    Logger.debug "BPF overload. re-injecting #{packet.class.name} to queue"
                    push(packet)
                end
            end
        end
        Logger.debug "packetqueue abnormally stopped"
    end
end
end
end
