module WifiTool
module Network
class ArpReader

    def self.parse_cache_line(iface, line)
        if RUBY_PLATFORM =~ /openbsd/i
            # linux general 
            /([0-9\.]+)\s+([a-f0-9:]+)\s+#{iface}\s+.*/i.match(line)
        else
            # osx and ubuntu: (192.168.0.1) at ff:ff:ff:ff:ff:ff on en0 ifscope [ethernet]
            /[^\s]+\s+\(([0-9\.]+)\)\s+at\s+([a-f0-9:]+).+#{iface}.*/i.match(line)
        end
    end    

    def self.parse(ctx)
        targets = []
        self.parse_cache do |ip, mac|
            if ip != ctx.gateway.ip and ip != ctx.iface.ip
                if ctx.options.core.ignore_ip?(ip) # TODO: implement ignore ip
                    Logger.debug "ctx ignore #{ip}"
                else
                    known = ctx.find_target ip, mac
                    if known.nil?
                        targets << Target.new(ip, mac)
                    else
                        targets << known
                    end
                end
            end
        end
        targets
    end

    def self.parse_cache
        iface = Context.get.iface.name
        Shell.arp.split("\n").each do |line|
            m = self.parse_cache_line(iface, line)
            unless m.nil?
                ip = m[1]
                hw = Target.normalized_mac(m[2])
                if hw != 'FF:FF:FF:FF:FF:FF'
                    yield(ip, hw)
                end
            end
        end
    end

    def self.find_address(address)
        self.parse_cache do |ip, mac|
            if ip == address
                return mac
            end
        end
        nil
    end

    def self.find_mac(address)
        self.parse_cache do |ip, mac|
            if mac == address
                return ip
            end
        end
        nil
    end

                    